<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.board.domain.qnapost.QnaPostMapper">

    <sql id="postColumns">
          idx
        , writerid
        , title
        , head_title
        , content
        , writer
        , view_cnt
        , notice_yn
        , del_yn
        , write_date
        , modified_date
    </sql>



	
    <!-- 게시글 저장 -->
    <insert id="save" parameterType="com.board.domain.qnapost.QnaPostRequest" useGeneratedKeys="true" keyProperty="idx">
        INSERT INTO pro_sol_board (
            <include refid="postColumns" />
        ) VALUES (
              #{idx}
            , #{writerid}
            , #{title}
            , #{headTitle}
            , #{content}
            , #{writer}
            , 0
            , #{noticeYn}
            , 0
            , NOW()
            , NULL
        )
    </insert>
    
        <!-- 게시글 상세정보 조회 -->
    <select id="findByIdx" parameterType="long" resultType="com.board.domain.qnapost.QnaPostResponse">
        SELECT
            <include refid="postColumns" />
        FROM
            pro_sol_board
        WHERE
            idx = #{value}
    </select>
    
       <!-- 게시글 수정 -->
    <update id="update" parameterType="com.board.domain.qnapost.QnaPostRequest">
        UPDATE pro_sol_board
        SET
              modified_date = NOW()
            , title = #{title}
            , head_title = #{headTitle}
            , content = #{content}
            , writer = #{writer}
            , notice_yn = #{noticeYn}
        WHERE
            idx = #{idx}
    </update>
    
        <!-- 게시글 삭제 -->
    <delete id="deleteByIdx" parameterType="long">
        UPDATE pro_sol_board
        SET
            del_yn = 1
        WHERE
            idx = #{idx}
    </delete>
    
    <!-- DB에 입력받은 아이디가 있는지 확인 -->
	<select id="getWriterId" parameterType="com.board.domain.qnapost.QnaPostRequest" resultType= "String">
		select writerid  
		from pro_sol_board
		where idx = #{idx}
	</select>
	
	<!-- 인덱스에 해당하는 제목 가져오기 -->
	<select id="getTitle" parameterType="com.board.domain.qnapost.QnaPostRequest" resultType= "String">
		select title  
		from pro_sol_board
		where idx = #{idx}
	</select>
	
	
	<!-- 인덱스에 해당하는 내용 가져오기 -->
	<select id="getContent" parameterType="com.board.domain.qnapost.QnaPostRequest" resultType= "String">
		select content  
		from pro_sol_board
		where idx = #{idx}
	</select>

	    <!-- 게시글 리스트 조회 -->
    <select id="findAll" parameterType="com.board.common.dto.SearchDto" resultType="com.board.domain.qnapost.QnaPostResponse">
        SELECT
            <include refid="postColumns" />
        FROM
            pro_sol_board
        WHERE
            del_yn = 0
             <include refid="search" />
        ORDER BY
            idx DESC
        LIMIT #{pagination.limitStart}, #{recordSize}
    </select>
    
        <!-- 게시글 수 카운팅 -->
    <select id="count" parameterType="com.board.common.dto.SearchDto" resultType="int">
        SELECT
            COUNT(*)
        FROM
            pro_sol_board
        WHERE
            del_yn = 0
             <include refid="search" />
    </select>
    
        <!-- 조회수 올리기 -->
	<update id="updatereviewcnt">
	   update 
	  	 pro_sol_board
	   set
	   	view_cnt = view_cnt + 1 
	   where
	   	idx= #{idx}
	</update>
	
	    <sql id="search">
        <!-- 검색 키워드가 있을 때 -->
        <if test="keyword != null and keyword != ''">
            <choose>
                <!-- 검색 유형이 있을 때 -->
                <when test="searchType != null and searchType != ''">
                    <choose>
                        <when test="'title'.equals( searchType )">
                            AND title LIKE CONCAT('%', #{keyword}, '%')
                        </when>
                        <when test="'content'.equals( searchType )">
                            AND content LIKE CONCAT('%', #{keyword}, '%')
                        </when>
                        <when test="'writer'.equals( searchType )">
                            AND writer LIKE CONCAT('%', #{keyword}, '%')
                        </when>
                    </choose>
                </when>
                <!-- 전체 검색일 때 때 -->
                <otherwise>
                    AND (
                           title LIKE CONCAT('%', #{keyword}, '%')
                        OR content LIKE CONCAT('%', #{keyword}, '%')
                        OR writer LIKE CONCAT('%', #{keyword}, '%')
                    )
                </otherwise>
            </choose>
        </if>
    </sql>
    
    
















</mapper>

